{"ast":null,"code":"var _jsxFileName = \"/Users/barath/Documents/React/ChatRoom/ChatRoom_App/react_frontend/src/components/Chatroom.js\",\n  _s = $RefreshSig$();\nimport './Chatroom.css';\nimport { useEffect, useState } from \"react\";\nimport { useForm } from 'react-hook-form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatroom() {\n  _s();\n  const query = new URLSearchParams(window.location.search);\n  const chatroom_code = query.get('code');\n  const [messages, setMessages] = useState([]);\n  const {\n    register,\n    handleSubmit\n  } = useForm();\n  function GetMessages() {\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Token ' + localStorage.getItem('token')\n      }\n    };\n    fetch(`http://127.0.0.1:8000/api/message/?chatroom_code=${chatroom_code}`, requestOptions).then(response => response.json()).then(response => {\n      setMessages(response);\n    });\n  }\n  useEffect(() => {\n    GetMessages();\n  });\n  const rendermessage = () => {\n    let messagelist = [];\n    messages.forEach(message => {\n      messagelist.push( /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: [message.sender, \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 33\n        }, this), \" \", message.message, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 76\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 30\n      }, this));\n    });\n    return messagelist;\n  };\n  function sendMessage(data) {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Token ' + localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        \"chatroom_code\": chatroom_code,\n        \"message\": data.message,\n        \"user\": localStorage.getItem('token')\n      })\n    };\n    fetch('http://127.0.0.1:8000/api/message/', requestOptions).then(response => response.json()).then(data => {\n      if (data.message) {\n        console.log(data.message);\n        document.getElementById('sendmessage').reset();\n      }\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"body\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: chatroom_code\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"chatbox\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"message\",\n        children: [rendermessage(), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This text message is long enough to test if the message div can handle this type of messages and break the messages into lines so it would fit inside the width of the parent div\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"sendmessage\",\n        autoComplete: \"off\",\n        onSubmit: handleSubmit(sendMessage),\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ...register('message', {\n            required: true\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n_s(Chatroom, \"SlU0Fcvy+onbrnp+vXDoOaqJIu8=\", false, function () {\n  return [useForm];\n});\n_c = Chatroom;\nexport default Chatroom;\nvar _c;\n$RefreshReg$(_c, \"Chatroom\");","map":{"version":3,"names":["useEffect","useState","useForm","jsxDEV","_jsxDEV","Chatroom","_s","query","URLSearchParams","window","location","search","chatroom_code","get","messages","setMessages","register","handleSubmit","GetMessages","requestOptions","method","headers","localStorage","getItem","fetch","then","response","json","rendermessage","messagelist","forEach","message","push","children","sender","fileName","_jsxFileName","lineNumber","columnNumber","sendMessage","data","body","JSON","stringify","console","log","document","getElementById","reset","class","id","autoComplete","onSubmit","required","type","value","_c","$RefreshReg$"],"sources":["/Users/barath/Documents/React/ChatRoom/ChatRoom_App/react_frontend/src/components/Chatroom.js"],"sourcesContent":["import './Chatroom.css';\nimport { useEffect, useState } from \"react\";\nimport { useForm} from 'react-hook-form';\n\nfunction Chatroom() {\n    const query = new URLSearchParams(window.location.search);\n    const chatroom_code = query.get('code')\n\n    const [messages, setMessages] = useState([]);\n\n    const {register, handleSubmit} = useForm();\n\n    function GetMessages() {\n        const requestOptions = {\n            method: 'GET',\n            headers: { \n                'Content-Type': 'application/json',\n                'Authorization': 'Token ' + localStorage.getItem('token')\n            },\n        };\n        fetch(`http://127.0.0.1:8000/api/message/?chatroom_code=${chatroom_code}`, requestOptions)\n            .then(response => response.json())\n            .then((response) => {\n                setMessages(response);\n            });\n    }\n\n    useEffect(() => {GetMessages()});\n\n    const rendermessage = () => {\n        let messagelist = [];\n        messages.forEach(message => {\n            messagelist.push(<p><b>{message.sender}: </b> {message.message}<br/></p>)\n        });\n        return messagelist;\n    }\n\n    function sendMessage(data) {\n        const requestOptions = {\n            method: 'POST',\n            headers: { \n                'Content-Type': 'application/json',\n                'Authorization': 'Token ' + localStorage.getItem('token')\n            },\n            body: JSON.stringify(\n                {\n                    \"chatroom_code\": chatroom_code,\n                    \"message\": data.message,\n                    \"user\": localStorage.getItem('token')\n                }\n            )\n        };\n        fetch('http://127.0.0.1:8000/api/message/', requestOptions)\n            .then(response => response.json())\n            .then((data) => {\n                if (data.message) {\n                    console.log(data.message);\n                    document.getElementById('sendmessage').reset();\n                }\n            });\n    }\n\n    return (\n        <div class='body'>\n            <h2>{chatroom_code}</h2>\n            <div class='chatbox'>\n                <div class='message'>\n                    {rendermessage()}\n                    <p>This text message is long enough to test if the message div can handle this type of messages and break the messages into lines so it would fit inside the width of the parent div</p>\n                </div>\n                <form id='sendmessage' autoComplete='off' onSubmit={handleSubmit(sendMessage)}>\n                    <input {...register('message', {\n                        required: true\n                    })}></input>\n                    <center><input type='submit' value='Send'></input></center>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default Chatroom;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}